```java
can we do better???   k element → 左边k/2，  右边k/2 → 最近的元素
左边k/2 ，must in the closest element
p1
k,  (p1, p1 + 1, k)


k / 2   (p1- k /2, p1 + 1, k - k / 2)  
k / 4

base case:
<1> left and right bound are within (0, n - 1) k = 1, 
<2> left = -1
<3> right = n

find k closest element (find k smallest element???)

k closest element → k smallest element O(log n + log k)

O(log n + k)


1 3 4  5  6  7 9 10 

closest k = 4, to 5 (if equal, take the smaller one)
step 1 → find the closest element   logN 
step 2 → find the closest k elements closest to target (中心开花)
中心开花--> 每一步take一个元素, 比较左边一个， 比较右边一个

can we do better???   k element → 左边k/2，  右边k/2 → 最近的元素
左边k/2 ，must in the closest element
p1
k,  (p1, p1 + 1, k)


k / 2   (p1- k /2, p1 + 1, k - k / 2)  
k / 4

base case:
<1> left and right bound are within (0, n - 1) k = 1, 
<2> left = -1
<3> right = n


减少搜索空间 （减半）   boil down a bigger problem into a smaller
保证不漏解
base case一定要分析清楚
search problem，






find Kth largest element in m sorted arrays??
K = 20
-100, 1000 
450 → 15 
(451, 1000) 
700 --->  25
(451, 699)
555 = 20

1
2
3
<1> scan all arrays → find min value, max value
<2> min → low bound    max → upper bound 
<3> binary (min, max);   n0,   n0 → 1. how many smaller, 2. how many smaller
m smaller →   

mid = lower + (upper - lower) / 2;
case 1. m == k → find solution  mid
case 2. m < k → lower = mid + 1;
case 3. m > k → upper = mid - 1;

```